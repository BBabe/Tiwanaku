github : https://github.com/dettweilerjs/dettweilerjs.github.io/blob/master/_posts/2022-04-10-tiwanaku-scenarios.md?plain=1
simu : https://www.codedna.me/posts/tiwanaku-scenarios.html
===================================================================================================
Remplissage à chaque étape ! pour éviter d'essayer trop de possibilités

while ça bouge:
	if len(5) exists: break
	if len(4) exists: push value

prendre la plus grosse crop ainsi remplie (si elle existe), chercher dans les formes avec au moins cette taille, et dans la forme choisie, il ne doit pas y avoir déjà deux fois le même chiffre, et faire la combinaison juste sur les chiffres qui manquent

- si je pars avec une mauvaise première région, c'est foutu
--> justement, ça va venir corriger !


AUTRE DIFFICULTÉ : list of possible crops




===================================================================================================

- faire autrement que récursion, juste avec un while (pour le random)



===================================================================================================
ÉPURER CODE

- tester np au lieu de listes


===================================================================================================
WHILE RANDOM

- je peux soulager les copies !

- random induissent un biais : chances équiprobables dans la fonction choice, mais est-ce que ça devrait être le cas ?

- comment paralléliser ? on verra !

- faire couleur + chiffres minimaux pour deviner l'unique
	- faire avec un nombre de tuiles, qui est d'ailleurs limité !!! 15 (ou 17) (ça compte pour la grande grille)

- faire une règle de temps ? ou de nombre de fois que j'appelle la fonction : quand ça veut pas, ça veut pas ?

- est-ce que c'est bien de partir du plus contraint, ça ne va justement pas trouver de solution

===================================================================================================
App sur internet

- bcp trop d'indices au début !
- mais hyper rapide !!

		plantGrid();
		makeFarms();
		colorFarms();
		solveGrid();
		stackTiles();

- plantCell : whether crop possible en i,j (et on l'y met)

- 1 fois sur 2 je plante une crop (s'il n'y en a pas déjà)
--> est-ce qu'on va visiter toutes les possibilités ? je ne vois pas bcp d'aléatoire pour l'instant

- intéressant : il remplit d'abord tous les 1, puis tous les 2 (il y en aura forcément moins que de 1 !), etc !
- puis on crée une région pour chaque 5 (malynx)
- on la complète dans un ordre aléatoire par ses voisins
- façon de faire la couleur extrêmement simple : suppose que ça marche dans tous les cas tout de même !!

- solve doit être pour savoir quelles tuiles laisser ? ça m'a pas l'air opti... mais vraiment pas ! Mais ouf la vitesse tout de même, je ne sais pas si c'est grâce au C ! Mais je pourrais presque coder en C ? Non, je veux utiliser sur smartphone

tries ?


===================================================================================================

- pour la complexité
	trop de copy ?
	list, meilleur outil ?
	essayer de plus contraindre les choses en commençant par les remplissages simples de 1 etc ?
	vérifier code, pour améliorer chaque partie de calcul !

- pourquoi je veux forcément dénombrer ?
	écrire le pendant "random" pour trouver une solution : c'est exactement la même chose que le site finalement, mais ai-je confiance ? Je veux aussi que ça marche sur portable sans internet ?
	vérifier la qualtié du scénario ...? (nb de régions différentes, s'assurer qu'il y a des régions de toutes les tailles)
	faire que l'ordi remplace la pachamama

first_couples : 1, 4, 30, 312, 4440 (37 formes de taille 5)

===================================================================================================

RECUL :

- à quoi bon tout ça ? j'ai même pas encore joué seul...
--> c'est une activité plaisante en soi, pas forcément utile
- les calculs pour trouver toutes les solutions ont l'air trop grands...

===================================================================================================
POUR COULEURS, JUSTE DÉTERMINER LES ENSEMBLES DE RÉGIONS QUI ONT LA MÊME COULEUR, ÇA C'EST UNIQUE (ensuite, les couleurs peuvent se permuter)

"couleur" = elle n'a pas de valeur spécifique, tout ce qu'on sait c'est qu'elle diffère des autres

listes des régions ac telle couleur
listes des régions ne pouvant pas avoir telle couleur

- qd plusieurs choix de régions, commencer par celles qui ont le plus de voisins

- 1st région une couleur --> mettre tous ses voisins dans la liste_imposs de régions correspondant aux impossibilités de cette couleur
- déplacer l'un de ses voisins dans une autre liste_poss, refaire pareil que la première région
- si une région est dans les deux listes_imposs, créer une 3e liste_poss avec !
	pratique, si c'est possible encore une fois, pour être sûr d'avoir les 4 couleurs
- sinon ... ?

- si à tout moment une région est dans 3 liste_imposs, il n'y a pas de doute sur sa liste_poss
- être sûr d'avoir les 4 couleurs

- il peut y avoir plusieurs solutions ! par ex pour une région un peu isolée, elle pourrait être de deux couleurs différentes, ça ne changerait rien aux autres

===================================================================================================
PLOTS

- chiffres cultures plus ou moins gros avec des couleurs différentes ?

===================================================================================================
- amélioration plus lente
- remplacer listes par numpy détériore aussi...

4_5_4
00:06:46
1068
00:07:21
1068

4_4_4
00:00:14
360
00:00:15
360
	25
	29

3_3_5
00:00:18
2824
00:00:19
2824
	42
	29

3_4_5

===================================================================================================
AUTRES

- pour les grilles de formes avec plusieurs solutions pour les cultures : déterminer les éléments qui permettent de l'identifier de façon unique
	une grille est fixée. Pour chaque autre grille (par ordre croissant de différence), sélectionner une position (non déjà sélectionnée) où les cultures diffèrent
- faire avec heuristique simple, en loop sur tous les territoires posés jusqu'à présent jusqu'à ce qu'il n'y ait plus de changement (et ce à chaque nouvelle itération)
- compter le nombre de jeux possibles
- remplacer oracle pachamana par ordi
	scanner une roue représentant une partie pour pouvoir en imprimer d'autres ?
- compter les symétries, pour les parties qui sont les "mêmes"
- faire gros plateau 5x9
- comment évaluer la difficulté / l'intérêt d'un scénario
- stat sur la liste de solution : compter le nb de rég pr chaque taille, puis faire une boîte à moustache de toutes les solutions (une boîte pour chaque taille)
- ordi résout jeu

===================================================================================================
BIN

FORMES
- new form : nb aléatoire de 1 à 5
- faire tourner des boucles sur i et j avec un test pour savoir si elle est déjà remplie, pour savoir si je fais commencer la new fig ici
- premier terrain de la région --> liste des possibilités pour les autres terrains de cette région (ne doit pas sortir ni ê déjà occupé --> pour cela, parcourir une liste des cases possibles), en choisir une au hasard
	faire i+-1, j+-1
	garder une liste des impossibles aussi ! (ou alors au lieu de 2 tableaux, 1 seul avec un booléen à 3 valeurs)
	juste besoin de rajouter les 4 voisins de la nouvelle case posée, les anciennes possibilités restent d'actualité
- recommencer jusqu'à atteindre la taille fixée auparavant (la liste des possibles se propage d'une itération à une autre, en enlevant les cases choisies)
- stocker chaque forme dans une liste (de formes = listes de coord)
- il peut arriver que la figure ne puisse aller jusqu'à sa taille fixée, dans ce cas s'arrêter là, ce n'est pas grave

COULEURS
- matrice de correspondance : ligne = colonne = formes, avec des 1 si elles sont voisines
--> je pense que ça va vite être contraignant, et qu'il vaut mieux faire comme ça :
- couleur aléatoire à la première, puis aléatoire dans les possibles pour la deuxième, et ainsi de suite. S'il reste autant de régions que de couleurs non utilisées, aléatoirement (plus de contrainte)
- faire dans quel ordre des formes ? plutôt les grosses en premier, ça a l'air plus contraignant

CULTURES
- comme d'hab, au fur et à mesure, plutôt que de réduire a posteriori toutes les combinaisons possibles (car complexité trop grande)
- à chaque culture ajoutée au fur et à mesure, maj son tableau correspondant avec des 0 autour
- on procède région par région
- comment énumérer les possibilités de placements pour une région, connaissant les tableaux ? juste faire avec des if !
- par taille de région croissante, - de chance d'échecs



